{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/adambarhum/Downloads/final snake/src/components/SnakeGame/snake-game.component.jsx\";\nimport React from 'react'; // utility functions\n\nfunction shallowEquals(arr1, arr2) {\n  if (!arr1 || !arr2 || arr1.length !== arr2.length) return false;\n  let equals = true;\n\n  for (var i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) equals = false;\n  }\n\n  return equals;\n}\n\nfunction arrayDiff(arr1, arr2) {\n  return arr1.map((a, i) => {\n    return a - arr2[i];\n  });\n} // display a single cell\n\n\nfunction GridCell(props) {\n  const classes = `grid-cell \n${props.foodCell ? \"grid-cell--food\" : \"\"} \n${props.snakeCell ? \"grid-cell--snake\" : \"\"}\n`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes,\n    style: {\n      height: props.size + \"px\",\n      width: props.size + \"px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n} // the main view\n\n\n_c = GridCell;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getStringTime = () => {\n      let {\n        time\n      } = this.state;\n      let min = Math.floor(time / 60).toString();\n      let sec = (time - min * 60).toString();\n      min = min.length === 1 ? \"0\" + min : min;\n      sec = sec.length === 1 ? \"0\" + sec : sec;\n      return min + \":\" + sec;\n    };\n\n    this.state = {\n      snake: [],\n      food: [],\n      // 0 = not started, 1 = in progress, 2= finished\n      status: 0,\n      // using keycodes to indicate direction\n      direction: 39,\n      time: 0\n    };\n    this.moveFood = this.moveFood.bind(this);\n    this.tickTimer = this.tickTimer.bind(this);\n    this.checkIfAteFood = this.checkIfAteFood.bind(this);\n    this.startGame = this.startGame.bind(this);\n    this.endGame = this.endGame.bind(this);\n    this.moveSnake = this.moveSnake.bind(this);\n    this.doesntOverlap = this.doesntOverlap.bind(this);\n    this.setDirection = this.setDirection.bind(this);\n    this.removeTimers = this.removeTimers.bind(this);\n  } // randomly place snake food\n\n\n  moveFood() {\n    if (this.moveFoodTimeout) clearTimeout(this.moveFoodTimeout);\n    const x = parseInt(Math.random() * this.numCells);\n    const y = parseInt(Math.random() * this.numCells);\n    this.setState({\n      food: [x, y]\n    });\n    this.moveFoodTimeout = setTimeout(this.moveFood, 5000);\n  }\n\n  setDirection({\n    keyCode\n  }) {\n    console.log(typeof keyCode); // if it's the same direction or simply reversing, ignore\n\n    if (keyCode === 37 || keyCode === 38 || keyCode === 39 || keyCode === 40) {\n      let changeDirection = true;\n      [[38, 40], [37, 39]].forEach(dir => {\n        if (dir.indexOf(this.state.direction) > -1 && dir.indexOf(keyCode) > -1) {\n          changeDirection = false;\n        }\n      });\n      if (changeDirection) this.setState({\n        direction: keyCode\n      });\n    }\n  }\n\n  moveSnake() {\n    const newSnake = []; // set in the new \"head\" of the snake\n\n    switch (this.state.direction) {\n      // down\n      case 40:\n        newSnake[0] = [this.state.snake[0][0], this.state.snake[0][1] + 1];\n        break;\n      // up\n\n      case 38:\n        newSnake[0] = [this.state.snake[0][0], this.state.snake[0][1] - 1];\n        break;\n      // right\n\n      case 39:\n        newSnake[0] = [this.state.snake[0][0] + 1, this.state.snake[0][1]];\n        break;\n      // left\n\n      case 37:\n        newSnake[0] = [this.state.snake[0][0] - 1, this.state.snake[0][1]];\n        break;\n    } // now shift each \"body\" segment to the previous segment's position\n\n\n    [].push.apply(newSnake, this.state.snake.slice(1).map((s, i) => {\n      // since we're starting from the second item in the list,\n      // just use the index, which will refer to the previous item\n      // in the original list\n      return this.state.snake[i];\n    }));\n    this.setState({\n      snake: newSnake\n    });\n    this.checkIfAteFood(newSnake);\n\n    if (!this.isValid(newSnake[0]) || !this.doesntOverlap(newSnake)) {\n      // end the game\n      this.endGame();\n    }\n  }\n\n  checkIfAteFood(newSnake) {\n    if (!shallowEquals(newSnake[0], this.state.food)) return; // snake gets longer\n\n    let newSnakeSegment;\n    const lastSegment = newSnake[newSnake.length - 1]; // where should we position the new snake segment?\n    // here are some potential positions, we can choose the best looking one\n\n    let lastPositionOptions = [[-1, 0], [0, -1], [1, 0], [0, 1]]; // the snake is moving along the y-axis, so try that instead\n\n    if (newSnake.length > 1) {\n      lastPositionOptions[0] = arrayDiff(lastSegment, newSnake[newSnake.length - 2]);\n    }\n\n    for (var i = 0; i < lastPositionOptions.length; i++) {\n      newSnakeSegment = [lastSegment[0] + lastPositionOptions[i][0], lastSegment[1] + lastPositionOptions[i][1]];\n\n      if (this.isValid(newSnakeSegment)) {\n        break;\n      }\n    }\n\n    this.setState({\n      snake: newSnake.concat([newSnakeSegment]),\n      food: []\n    });\n    this.moveFood();\n  } // is the cell's position inside the grid?\n\n\n  isValid(cell) {\n    return cell[0] > -1 && cell[1] > -1 && cell[0] < this.numCells && cell[1] < this.numCells;\n  }\n\n  doesntOverlap(snake) {\n    return snake.slice(1).filter(c => {\n      return shallowEquals(snake[0], c);\n    }).length === 0;\n  }\n\n  tickTimer() {\n    let newTime = this.state.time + 1;\n    this.setState({\n      time: newTime\n    });\n  }\n\n  startGame() {\n    this.removeTimers(); // this.setState({ time: 0 })\n\n    if (this.timeInterval) clearInterval(this.timeInterval);\n    this.moveSnakeInterval = setInterval(this.moveSnake, 130);\n    this.timeInterval = setInterval(this.tickTimer, 1000);\n    this.moveFood();\n    this.setState({\n      status: 1,\n      snake: [[5, 5]],\n      food: [10, 10]\n    }); //need to focus so keydown listener will work!\n\n    this.el.focus();\n  }\n\n  endGame() {\n    if (this.timeInterval) clearInterval(this.timeInterval);\n    this.removeTimers();\n    this.setState({\n      status: 2\n    });\n  }\n\n  removeTimers() {\n    if (this.moveSnakeInterval) clearInterval(this.moveSnakeInterval);\n    if (this.moveFoodTimeout) clearTimeout(this.moveFoodTimeout);\n  }\n\n  componentWillUnmount() {\n    this.removeTimers();\n  }\n\n  render() {\n    // each cell should be approximately 15px wide, so calculate how many we need\n    this.numCells = Math.floor(this.props.size / 15);\n    const cellSize = this.props.size / this.numCells;\n    const cellIndexes = Array.from(Array(this.numCells).keys());\n    const cells = cellIndexes.map(y => {\n      return cellIndexes.map(x => {\n        const foodCell = this.state.food[0] === x && this.state.food[1] === y;\n        let snakeCell = this.state.snake.filter(c => c[0] === x && c[1] === y);\n        snakeCell = snakeCell.length && snakeCell[0];\n        return /*#__PURE__*/_jsxDEV(GridCell, {\n          foodCell: foodCell,\n          snakeCell: snakeCell,\n          size: cellSize\n        }, x + \" \" + y, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this);\n      });\n    });\n    let overlay;\n\n    if (this.state.status === 0) {\n      overlay = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"snake-app__overlay\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.startGame,\n          children: \"Start game!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this);\n    } else if (this.state.status === 2) {\n      overlay = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"snake-app__overlay\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-1\",\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"GAME OVER!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-1\",\n          children: [\"Your score: \", this.state.snake.length, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.startGame,\n          children: \"Start a new game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"snake-app\",\n        onKeyDown: this.setDirection,\n        style: {\n          width: this.props.size + \"px\",\n          height: this.props.size + \"px\"\n        },\n        ref: el => this.el = el,\n        tabIndex: -1,\n        children: [overlay, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid\",\n          style: {\n            width: this.props.size + \"px\",\n            height: this.props.size + \"px\"\n          },\n          children: cells\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 d-flex\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary mx-auto py-3 px-5\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-weight-bold mb-0\",\n              children: [\" \", this.getStringTime()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default (() => /*#__PURE__*/_jsxDEV(App, {\n  size: 400\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 293,\n  columnNumber: 22\n}, this));\n\nvar _c;\n\n$RefreshReg$(_c, \"GridCell\");","map":{"version":3,"sources":["/Users/adambarhum/Downloads/final snake/src/components/SnakeGame/snake-game.component.jsx"],"names":["React","shallowEquals","arr1","arr2","length","equals","i","arrayDiff","map","a","GridCell","props","classes","foodCell","snakeCell","height","size","width","App","Component","constructor","getStringTime","time","state","min","Math","floor","toString","sec","snake","food","status","direction","moveFood","bind","tickTimer","checkIfAteFood","startGame","endGame","moveSnake","doesntOverlap","setDirection","removeTimers","moveFoodTimeout","clearTimeout","x","parseInt","random","numCells","y","setState","setTimeout","keyCode","console","log","changeDirection","forEach","dir","indexOf","newSnake","push","apply","slice","s","isValid","newSnakeSegment","lastSegment","lastPositionOptions","concat","cell","filter","c","newTime","timeInterval","clearInterval","moveSnakeInterval","setInterval","el","focus","componentWillUnmount","render","cellSize","cellIndexes","Array","from","keys","cells","overlay"],"mappings":"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","sourcesContent":["import React from 'react'// utility functions\r\nfunction shallowEquals(arr1, arr2) {\r\n  if (!arr1 || !arr2 || arr1.length !== arr2.length) return false;\r\n  let equals = true;\r\n  for (var i = 0; i < arr1.length; i++) {\r\n    if (arr1[i] !== arr2[i]) equals = false;\r\n  }\r\n  return equals;\r\n}\r\n\r\nfunction arrayDiff(arr1, arr2) {\r\n  return arr1.map((a, i) => {\r\n    return a - arr2[i]\r\n  })\r\n}\r\n\r\n// display a single cell\r\nfunction GridCell(props) {\r\n  const classes = `grid-cell \r\n${props.foodCell ? \"grid-cell--food\" : \"\"} \r\n${props.snakeCell ? \"grid-cell--snake\" : \"\"}\r\n`;\r\n  return (\r\n    <div\r\n      className={classes}\r\n      style={{ height: props.size + \"px\", width: props.size + \"px\" }}\r\n    />\r\n  );\r\n}\r\n\r\n// the main view\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      snake: [],\r\n      food: [],\r\n      // 0 = not started, 1 = in progress, 2= finished\r\n      status: 0,\r\n      // using keycodes to indicate direction\r\n      direction: 39,\r\n      time: 0\r\n    };\r\n\r\n    this.moveFood = this.moveFood.bind(this);\r\n    this.tickTimer = this.tickTimer.bind(this);\r\n    this.checkIfAteFood = this.checkIfAteFood.bind(this);\r\n    this.startGame = this.startGame.bind(this);\r\n    this.endGame = this.endGame.bind(this);\r\n    this.moveSnake = this.moveSnake.bind(this);\r\n    this.doesntOverlap = this.doesntOverlap.bind(this);\r\n    this.setDirection = this.setDirection.bind(this);\r\n    this.removeTimers = this.removeTimers.bind(this);\r\n  }\r\n  // randomly place snake food\r\n  moveFood() {\r\n    if (this.moveFoodTimeout) clearTimeout(this.moveFoodTimeout)\r\n    const x = parseInt(Math.random() * this.numCells);\r\n    const y = parseInt(Math.random() * this.numCells);\r\n    this.setState({ food: [x, y] });\r\n    this.moveFoodTimeout = setTimeout(this.moveFood, 5000)\r\n  }\r\n\r\n  setDirection({ keyCode }) {\r\n    console.log(typeof keyCode)\r\n    // if it's the same direction or simply reversing, ignore\r\n    if (keyCode === 37 || keyCode === 38 || keyCode === 39 || keyCode === 40) {\r\n\r\n      let changeDirection = true;\r\n      [[38, 40], [37, 39]].forEach(dir => {\r\n        if (dir.indexOf(this.state.direction) > -1 && dir.indexOf(keyCode) > -1) {\r\n          changeDirection = false;\r\n        }\r\n      });\r\n\r\n      if (changeDirection) this.setState({ direction: keyCode });\r\n    }\r\n  }\r\n\r\n  moveSnake() {\r\n    const newSnake = [];\r\n    // set in the new \"head\" of the snake\r\n    switch (this.state.direction) {\r\n      // down\r\n      case 40:\r\n        newSnake[0] = [this.state.snake[0][0], this.state.snake[0][1] + 1];\r\n        break;\r\n      // up\r\n      case 38:\r\n        newSnake[0] = [this.state.snake[0][0], this.state.snake[0][1] - 1];\r\n        break;\r\n      // right\r\n      case 39:\r\n        newSnake[0] = [this.state.snake[0][0] + 1, this.state.snake[0][1]];\r\n        break;\r\n      // left\r\n      case 37:\r\n        newSnake[0] = [this.state.snake[0][0] - 1, this.state.snake[0][1]];\r\n        break;\r\n    }\r\n    // now shift each \"body\" segment to the previous segment's position\r\n    [].push.apply(\r\n      newSnake,\r\n      this.state.snake.slice(1).map((s, i) => {\r\n        // since we're starting from the second item in the list,\r\n        // just use the index, which will refer to the previous item\r\n        // in the original list\r\n        return this.state.snake[i];\r\n      })\r\n    );\r\n\r\n    this.setState({ snake: newSnake });\r\n\r\n    this.checkIfAteFood(newSnake);\r\n    if (!this.isValid(newSnake[0]) || !this.doesntOverlap(newSnake)) {\r\n      // end the game\r\n      this.endGame()\r\n    }\r\n  }\r\n\r\n  checkIfAteFood(newSnake) {\r\n    if (!shallowEquals(newSnake[0], this.state.food)) return\r\n    // snake gets longer\r\n    let newSnakeSegment;\r\n    const lastSegment = newSnake[newSnake.length - 1];\r\n\r\n    // where should we position the new snake segment?\r\n    // here are some potential positions, we can choose the best looking one\r\n    let lastPositionOptions = [[-1, 0], [0, -1], [1, 0], [0, 1]];\r\n\r\n    // the snake is moving along the y-axis, so try that instead\r\n    if (newSnake.length > 1) {\r\n      lastPositionOptions[0] = arrayDiff(lastSegment, newSnake[newSnake.length - 2]);\r\n    }\r\n\r\n    for (var i = 0; i < lastPositionOptions.length; i++) {\r\n      newSnakeSegment = [\r\n        lastSegment[0] + lastPositionOptions[i][0],\r\n        lastSegment[1] + lastPositionOptions[i][1]\r\n      ];\r\n      if (this.isValid(newSnakeSegment)) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      snake: newSnake.concat([newSnakeSegment]),\r\n      food: []\r\n    });\r\n    this.moveFood();\r\n  }\r\n\r\n  // is the cell's position inside the grid?\r\n  isValid(cell) {\r\n    return (\r\n      cell[0] > -1 &&\r\n      cell[1] > -1 &&\r\n      cell[0] < this.numCells &&\r\n      cell[1] < this.numCells\r\n    );\r\n  }\r\n\r\n  doesntOverlap(snake) {\r\n    return (\r\n      snake.slice(1).filter(c => {\r\n        return shallowEquals(snake[0], c);\r\n      }).length === 0\r\n    );\r\n  }\r\n\r\n  tickTimer() {\r\n    let newTime = this.state.time + 1\r\n    this.setState({ time: newTime })\r\n  }\r\n\r\n  startGame() {\r\n    this.removeTimers();\r\n    // this.setState({ time: 0 })\r\n    if (this.timeInterval) clearInterval(this.timeInterval)\r\n    this.moveSnakeInterval = setInterval(this.moveSnake, 130);\r\n    this.timeInterval = setInterval(this.tickTimer, 1000);\r\n    this.moveFood();\r\n\r\n    this.setState({\r\n      status: 1,\r\n      snake: [[5, 5]],\r\n      food: [10, 10]\r\n    });\r\n    //need to focus so keydown listener will work!\r\n    this.el.focus();\r\n  }\r\n\r\n  endGame() {\r\n    if (this.timeInterval) clearInterval(this.timeInterval)\r\n    this.removeTimers();\r\n    this.setState({\r\n      status: 2\r\n    })\r\n  }\r\n\r\n  removeTimers() {\r\n    if (this.moveSnakeInterval) clearInterval(this.moveSnakeInterval);\r\n    if (this.moveFoodTimeout) clearTimeout(this.moveFoodTimeout)\r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.removeTimers();\r\n  }\r\n\r\n  getStringTime = () => {\r\n    let { time } = this.state\r\n    let min = Math.floor(time / 60).toString()\r\n    let sec = (time - (min * 60)).toString()\r\n    min = min.length === 1 ? (\"0\" + min) : min\r\n    sec = sec.length === 1 ? (\"0\" + sec) : sec\r\n    return (min + \":\" + sec)\r\n  }\r\n\r\n  render() {\r\n    // each cell should be approximately 15px wide, so calculate how many we need\r\n    this.numCells = Math.floor(this.props.size / 15);\r\n    const cellSize = this.props.size / this.numCells;\r\n    const cellIndexes = Array.from(Array(this.numCells).keys());\r\n    const cells = cellIndexes.map(y => {\r\n      return cellIndexes.map(x => {\r\n        const foodCell = this.state.food[0] === x && this.state.food[1] === y;\r\n        let snakeCell = this.state.snake.filter(c => c[0] === x && c[1] === y);\r\n        snakeCell = snakeCell.length && snakeCell[0];\r\n\r\n        return (\r\n          <GridCell\r\n            foodCell={foodCell}\r\n            snakeCell={snakeCell}\r\n            size={cellSize}\r\n            key={x + \" \" + y}\r\n          />\r\n        );\r\n      });\r\n    });\r\n\r\n    let overlay;\r\n    if (this.state.status === 0) {\r\n      overlay = (\r\n        <div className=\"snake-app__overlay\">\r\n          <button onClick={this.startGame}>Start game!</button>\r\n        </div>\r\n      );\r\n    } else if (this.state.status === 2) {\r\n      overlay = (\r\n        <div className=\"snake-app__overlay\">\r\n          <div className=\"mb-1\"><b>GAME OVER!</b></div>\r\n          <div className=\"mb-1\">Your score: {this.state.snake.length} </div>\r\n          <button onClick={this.startGame}>Start a new game</button>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <>\r\n        <div\r\n          className=\"snake-app\"\r\n          onKeyDown={this.setDirection}\r\n          style={{\r\n            width: this.props.size + \"px\",\r\n            height: this.props.size + \"px\"\r\n          }}\r\n          ref={el => (this.el = el)}\r\n          tabIndex={-1}\r\n        >\r\n          {overlay}\r\n          <div\r\n            className=\"grid\"\r\n            style={{\r\n              width: this.props.size + \"px\",\r\n              height: this.props.size + \"px\"\r\n            }}\r\n          >\r\n            {cells}\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-12 d-flex\">\r\n            <button className=\"btn btn-primary mx-auto py-3 px-5\">\r\n              <h3 className=\"font-weight-bold mb-0\"> {this.getStringTime()}</h3>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default () => <App size={400} />"]},"metadata":{},"sourceType":"module"}